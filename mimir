#!/usr/bin/env python

from __future__ import print_function

import os
import sys
import argparse

import yaml
import git
import argcomplete

DEFAULT_STORE = 'example'
INDEX_FILENAME = 'index.yaml'

class Mimir(object):
    def __init__(self, store):
        try:
            self.repository = git.Repo(store)
        except git.exc.InvalidGitRepositoryError:
            # Repository does not exist.
            self.repository = git.Repo.init(store)
        assert not self.repository.bare

        if (not self.repository.heads or
                INDEX_FILENAME not in self.repository.tree(None)):
            if not os.path.isfile(self.get_relative_name(INDEX_FILENAME)):
                # Create the index file if it doesn't exist
                open(INDEX_FILENAME, 'w').close()
            self.repository.index.add([INDEX_FILENAME])
            self.repository.index.commit("Initial commit of index file")

        filename = self.get_relative_name(INDEX_FILENAME)
        with open(filename, 'r') as config_file:
            self.data = yaml.load(config_file)

    def validate(self):
        for key in self.data:
            print(key, os.path.isfile(self.get_relative_name(key + '.pdf')))

    def get_relative_name(self, name):
        """Get the absolute path of an object in the repo"""
        return os.path.join(self.repository.working_tree_dir, name)

    def synchronize_index_file(self):
        """Commit any changes to the local repository"""
        filename = self.get_relative_name(INDEX_FILENAME)
        with open(filename, 'w') as outfile:
            yaml.dump(self.data, outfile, default_flow_style=False)
        if self.repository.head.commit.diff(None, paths=[INDEX_FILENAME]):
            self.repository.index.add([INDEX_FILENAME])
            self.repository.index.commit("Synchronize index file")

    def add(self, args):
        """Add a paper to the store

        Args:
            filename (str): the file to add
            description (dict): a description of the paper
        """
        self.synchronize_index_file()

    def tag(self, args):
        """Add a tag to a paper
        """
        paper_name = args.paper + '.pdf'
        paper_path = self.get_relative_name(paper_name)

        tags_directory = self.get_relative_name('tags')
        if not os.path.isdir(tags_directory):
            os.mkdir(tags_directory)

        tag_directory = os.path.join(tags_directory, args.tag_name)
        if not os.path.isdir(tag_directory):
            os.mkdir(tag_directory)

        link_name = os.path.join(tag_directory, paper_name)
        if not os.path.islink(link_name):
            os.symlink(paper_path, link_name)

    def list(self, _):
        for entry in self.data:
            print(entry)

    def list_authors(self, _):
        authors = {author for entry in self.data.itervalues() 
                   for author in entry['author'] if 'author' in entry}
        for author in sorted(authors):
            print(author)

    def list_tags(self, _):
        tag_directory = self.get_relative_name('tags')
        if not os.path.isdir(tag_directory):
            os.mkdir(tag_directory)
        for item in os.listdir(tag_directory):
            if os.path.isdir(os.path.join(tag_directory, item)):
                print(item)

    def annotate(self, paper):
        """Add notes to a paper"""
        pass

    def mark_read(self, paper, read):
        """Mark a paper as read"""
        pass

def is_dir(dirname):
    """Checks if a path is an actual directory"""
    if not os.path.isdir(dirname):
        msg = "{0} is not a directory".format(dirname)
        raise argparse.ArgumentTypeError(msg)
    else:
        return dirname

def main():

    parser = argparse.ArgumentParser(
        description='Manage a collection of academic papers.')
    parser.add_argument('--store', type=is_dir, default=DEFAULT_STORE,
                        help='the data store to use')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-v', '--verbose', action='count',
                       default=0, help='increase verbosity level')
    group.add_argument('-q', '--quiet', action='store_const', const=-1,
                       dest='verbose', help='silence all output')

    subparsers = parser.add_subparsers(title="Commands", metavar='commands')

    parser_add = subparsers.add_parser('add', help="Add a paper")
    # parser_add.add_argument('-f', '--foo', action='store_true',
    #                         help='A flag for add')
    parser_add.set_defaults(command='add')

    parser_list = subparsers.add_parser('list', help="List entries")
    parser_list.set_defaults(command='list')

    parser_list = subparsers.add_parser('list-authors', help="List authors")
    parser_list.set_defaults(command='list_authors')

    parser_tag = subparsers.add_parser('tag', help="Tag a paper")
    parser_tag.add_argument('paper', help='Paper to tag')
    parser_tag.add_argument('tag_name', help='Name of tag')
    parser_tag.set_defaults(command='tag')

    parser_list_tags = subparsers.add_parser('list_tags', help="List entries")
    parser_list_tags.set_defaults(command='list_tags')

    argcomplete.autocomplete(parser, always_complete_options=False)

    args = parser.parse_args()
    try:
        mimir = Mimir(args.store)
        getattr(mimir, args.command)(args)
    except Exception as error: # pylint: disable=broad-except
        print("ERROR:", error, file=sys.stderr)


if __name__ == "__main__":
    main()
